<?php
namespace OAuth\Unit\UserData\Extractor;

use OAuth\UserData\Extractor\Vkontakte;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-08 at 00:52:53.
 */
class VkontakteTest extends \PHPUnit_Framework_TestCase
{
    const PROFILE_RESPONSE = <<<END
{
   "response":[
      {
         "uid":123,
         "first_name":"And",
         "last_name":"~",
         "sex":2,
         "domain":"id123",
         "screen_name":"id123",
         "bdate":"1.1.2000",
         "city":650,
         "country":2,
         "timezone":3,
         "photo_50":"http:\/\/vk.me\/v123\/4e73\/VaCsWanQKb0.jpg",
         "photo_100":"http:\/\/vk.me\/v123\/4e72\/DZjDOTbmRT0.jpg",
         "photo_200":"http:\/\/vk.me\/v123\/4e71\/rqsUn2UgMY0.jpg",
         "photo_max":"http:\/\/vk.me\/v123\/4e71\/rqsUn2UgMY0.jpg",
         "photo_200_orig":"http:\/\/vk.me\/v123\/4e6f\/q_uPlunLD2A.jpg",
         "photo_400_orig":"http:\/\/vk.me\/v123\/4e70\/UZsU7TCKW9Y.jpg",
         "photo_max_orig":"http:\/\/vk.me\/v123\/4e70\/UZsU7TCKW9Y.jpg",
         "photo_id":"123_123",
         "has_mobile":1,
         "online":0,
         "can_post":1,
         "can_see_all_posts":1,
         "can_see_audio":1,
         "can_write_private_message":1,
         "home_phone":"",
         "site":"",
         "status":"",
         "last_seen":{
            "time":1429032458,
            "platform":7
         },
         "common_count":4,
         "counters":{
            "albums":10,
            "videos":0,
            "audios":6,
            "notes":0,
            "photos":235,
            "groups":6,
            "gifts":0,
            "friends":4,
            "online_friends":0,
            "user_videos":0,
            "followers":1
         },
         "university":0,
         "university_name":"",
         "faculty":0,
         "faculty_name":"",
         "graduation":0,
         "relation":0,
         "personal":[

         ],
         "interests":"",
         "music":"",
         "activities":"",
         "movies":"",
         "tv":"",
         "books":"",
         "games":"",
         "universities":[

         ],
         "schools":[

         ],
         "about":"My bio",
         "relatives":[

         ],
         "quotes":""
      }
   ]
}
END;

    const CITY_RESPONSE = <<<END
{
    "response": [{
        "id": "650",
        "title": "Sin city"
    }]
}
END;


    /**
     * @var Vkontakte
     */
    protected $extractor;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->extractor = new Vkontakte();
        $service = $this->getMockBuilder('\\OAuth\\OAuth2\\Service\\Vkontakte')
            ->disableOriginalConstructor()
            ->getMock();

        $service->expects($this->any())
            ->method('requestJSON')
            ->willReturnCallback(function ($arg) {
                if ($arg == Vkontakte::REQUEST_PROFILE) {
                    return json_decode(self::PROFILE_RESPONSE, TRUE);
                } elseif ($arg == Vkontakte::REQUEST_CITY) {
                    return json_decode(self::CITY_RESPONSE, TRUE);
                }

                return null;
            });

        /**
         * @var \OAuth\Common\Service\ServiceInterface $service
         */
        $this->extractor->setService($service);
    }

    public function testGetEmailVerified()
    {
        $this->assertFalse($this->extractor->isEmailVerified());
    }

    public function testGetUniqueId()
    {
        $this->assertEquals(123, $this->extractor->getUniqueId());
    }

    public function testGetUsername()
    {
        $this->assertEquals('And ~', $this->extractor->getUsername());
    }

    public function testGetFullName()
    {
        $this->assertEquals('And ~', $this->extractor->getFullName());
    }

    public function testGetFistName()
    {
        $this->assertEquals('And', $this->extractor->getFirstName());
    }

    public function testGetLastName()
    {
        $this->assertEquals('~', $this->extractor->getLastName());
    }

    public function testGetDescription()
    {
        $this->assertEquals('My bio', $this->extractor->getDescription());
    }

    public function testGetLocation()
    {
        $this->assertSame(['id' => '650', 'title' => 'Sin city'], $this->extractor->getLocation());
    }

    public function testGetProfileUrl()
    {
        $this->assertEquals('https://vk.com/id123', $this->extractor->getProfileUrl());
    }

    public function testGetImageUrl()
    {
        $this->assertEquals('http://vk.me/v123/4e70/UZsU7TCKW9Y.jpg', $this->extractor->getImageUrl());
    }

    public function testGetWebsites()
    {
        $this->assertNull($this->extractor->getWebsites());
    }

    public function testGetExtra()
    {
        $extra = $this->extractor->getExtras();

        $this->assertArrayHasKey('sex', $extra);
        $this->assertArrayHasKey('bdate', $extra);

        $this->assertArrayNotHasKey('name', $extra);
        $this->assertArrayNotHasKey('id', $extra);
        $this->assertArrayNotHasKey('description', $extra);
    }
}
